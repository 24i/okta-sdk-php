<?php
/*******************************************************************************
 * Copyright 2017 Okta, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/

namespace Okta\\{{namespace}};

use Okta\Resource\AbstractResource;

class {{modelName}} extends AbstractResource
{
    {{#each properties}}
    const {{upperSnakeCase propertyName}} = '{{propertyName}}';
    {{/each}}

    {{#each properties}}
    /**
     * @return {{getType this}}
     */
    {{#if isObject}}
    public function get{{pascalCase propertyName}}(array $options = [])
    {
        return $this->getResourceProperty(
                        self::{{upperSnakeCase propertyName}},
                        {{model}}::class,
                        $options
                    );
    }

    {{#unless readOnly}}
    /**
     * @return self
     */
    public function set{{pascalCase propertyName}}({{model}} ${{propertyName}})
    {
        $this->setResourceProperty(
                        self::{{upperSnakeCase propertyName}},
                        ${{propertyName}}
                    );
        
        return $this;
    }
    {{/unless}}
    {{else}}
    public function get{{pascalCase propertyName}}()
    {
        return $this->{{getAccessMethodType this}}(self::{{upperCase (snakeCase propertyName)}});
    }
    {{/if}}
    
    {{/each}}
    {{#each methods}}
    {{#if operation.isArray}}
    public function {{getMethodArrayName alias}}(array $options = [])
    {
        return $this
                ->getDataStore()
                ->getCollection(
                    "{{{getMethodPath this}}}",
                    {{operation.responseModel}}::class,
                    Collection::class,
                    $options
                );
    }
    {{else}}
    public function {{camelCase alias}}({{{getMethodParams this}}})
    {
        $uri = "{$this->getDataStore()->getOrganizationUrl}{{{getMethodPath this}}}";
        return $this
                ->getDataStore()
                ->executeRequest(
                    {{{getMethodRequestParams this}}}{{path}}
                );
    }
    {{/if}}
    {{/each}}
}
